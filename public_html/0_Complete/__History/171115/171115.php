<?php
/*-------------------------------------------

<SQL 인젝션(SQL Injection)>
 외부에서 쿼리문 조작 1117page

<?php
$query = "SELECT ~ FROM ~ WHERE ~ ORDER BY ~ LIMIT;";
$result = mysql_query($query);
?>
(like = 포함, if = 완전히 같은 것)

* $_GET방식 주의 : global 변수로 받음

**SQL 인젝션 회피 방법 : L7 방화벽, L7 무료 유틸리티
 Apache log %20 = space

L7 장비 : 그 계층의 프로토콜을 깔 수 있는 장비를 의미
 ex) L7 방화벽 HTTP, LTTP


///////////////////////////////////////////
// 문자열 
///////////////////////////////////////////
<대소문자로 변환하는 함수> 208p
strtolower()
strtoupper()
..

<아스키 값 변환 함수> 210p
bin2hex() binary -> ascii
hex2bin()
ord() 주어진 문자열의 첫 번째 문자의 아스키 값
chr() 한 문자를 아스키 값으로
..

<이스케이프 함수> 213p
addcslashes()
stripcslasheds()
addslashes()
stripslashes()
quotemeta() 메타문자 앞에 백슬래시
preg_quote() 정규표현식(PCRE)의 특수문자 앞에 백슬래시

<특수 문자를 HTML 엔티티로 변환하는 함수> 217p
htmlspecialchjars()
..
htmlentities()
..
get_html_Translation_Table()
..
ex) <br>코드가 아닌 <br>이라는 문자열을 쓰고싶을때 사용


<number_format() 함수> 231p

<문자열 찾는 함수> 238p

<문자열 나누기/합치기 함수> 256p
explode() 나누기
implode(또는 join) 합치기

//////////////////////////////////////////////////////
// 과제 - 
// One Time Password
//////////////////////////////////////////////////////
상식 : 사실 장비와 서버간 시간이 틀어짐 입력할때 시간을 맞춰줌
TCP 사용시엔 비트연산을 이용한 단순한 암호화를 진행
HTTP는 전체적으로 코드가 노출됨 (와이어샤크 등등 패킷캡쳐시) → OTP플 이용한 암호화 사용?

서버 통신이 안되는 상황. 몇초정도는 서버와 OTP가 틀어질 수 있음.
→ 세 구간(before, current, after)을 비교해야함. 글로벌 서비스시 글로벌시를 이용

어떤 공식에 의해서 키를 만들어야함 (랜덤이 들어가선 안됨)

잘 만들면 사용할 수 있으나..
... 클라가 unity3d라서 노출됨. 따라서 완벽한 보안은 불가능

PHP 시간함수( strtotime, time(), date() )

------> https를 사용하면 모두 해결되긴 함 
 https는 대칭키가 아니라 비대칭키(암복호화키가 서로 다름)이므로 클라쪽 키를 알아도 해킹 불가능
 하지만 수학적 공식을 사용하므로 상당히 느리며 비용이 상당히 많이 듬
 따라서 게임같은 경우에는 로그인 정도에서만 사용하는 수준

//////////////////////////////////////////////////////
// $_POST방식
//////////////////////////////////////////////////////
 // 폼을 이용하며 길지 않고 노출돼도 상관없는 정보를 넘길때 사용. 일반적으로 GET방식을 사용하는게 편리해서 GET방식을 사용 
 <?php
 echo $_POST['id'];
 echo $_POST['pass'];
 ?>

 GET방식처럼 주소에 값을 넘기는 것은 불가능

 FIDDLER를 이용해야함
 Fiddler실행 - 우측Composer탭 - Method:POST로 설정

 User-Agent:Fiddler
 Host: 서버주소:포트
 Content-Length: 20
 Content-Type: application/x-www-form-urlencoded //이걸 넣어야 php가 post방식으로 넣었따는 것을 인식

 결과도 FIDDLER에서 확인해야함

 --------------------------------------------------*/

 /*-------------------------------------------------
 // config 파일 만들때 반드시 php여야함
 // php가 아니면 그대로 노출됨. php면 관리자 외에는 볼 수 없음
 <?php
 $DB_IP = 'localhost';
 $DB_ID = 'root';
 $DB_PASS = '1234';
 $DB_NAME = 'test';
 ?>
---------------------------------------------------*/


///////////////////////////////////////////////////////
// DB 연결
///////////////////////////////////////////////////////
//PHP.net에서 MySQL 검색
// php에서 mysql을 접속하기
// 1. 완전 초창기, 옛날 버전 → php7에서 삭제될 예정
// mysql_connect( 
// mysql_query(
// 문제점 : 단 하나의 DB에만 접속할 수 있음. 인자가 쿼리 뿐이 없기 때문. → 샤딩도 안되고 제대로 써먹을 수 없음 
//
// 2. 신버전 * 이걸 사용할 것
// mysqli_connect( // DB연결 객체를 뱉어냄 
// mysqli_query( // DB객체 인자, 쿼리문을 보낼 수 있음
// 
// 3. mysqli class
// 함수가 멤버에 있다는 것 이외에는 사용법이나 구조가 신버전과 같음

//////////////////////////////////////////////////////////////
// DB 연결 & 사용할 DB 선택
//////////////////////////////////////////////////////////////
$DB = @mysqli_connect('localhost', 'root', '1234', 'db', 3306);
//서비스할때 warning 등등을 다 안보이게함. 이를 코드차원에서 안보이게 하는 방법은 함수 앞에 @를 붙이는 것
if(!$DB)
{
	echo "ERROR # mysqli_connect() : " . mysqli_connect_error();
	exit;
}

//////////////////////////////////////////////////////////////
// 언어셋 맞춤
//////////////////////////////////////////////////////////////
mysqli_set_charset($DB, "utf8");
echo 'SUCCESS CONNECT DB <br>';
// 필수는 아님. 한글같은게 들어가고 인코딩이 다를 경우
// 혹시라도 DB가 UTF-8이 아닐 경우, UTF-8로 달라고 DB에 요청하는 함수임

////////////////////////////////////////////////////////////
// 인자 받아서 DB에 넣기
////////////////////////////////////////////////////////////
$id = $_GET['id'];
/*-------------------------------
크롬은 문제가 없는데 익스플로러에서 주소창에 한글 입력시 euc-kr로 전송되는 버그가 있었음 
-------------------------------*/
// iconv 인코딩 변환하는 함수
//$nickname = iconv("euc-kr", "UTF=8", $_GET['password']; 
$password = $_GET['password'];

$Query = "INSERT INTO test_accountdb (id, password) VALUES ('{$id}', '{$password}')";
echo $Query.'<br>'; // 확인용
$Result = mysqli_query($DB, $Query);
//  RESULT 쿼리에 대한 결과가 들어있는 핸들. INSERT에 대한 결과이므로 성공 여부 판단용
// INSERT 하다가 에러가 날 수 있는 경우 : UNIQUE 중복, PRIMARY_KEY 중복, 컬럼이름 틀렸을때,칸이 잘못맞았을떄
// * 에러가 났으면 에러가 난 쿼리문 전체의 로그를 남겨야함
if(!$Result)
{
	echo "Query error : " . mysqli_error($DB) . '<br>'; //에러 확인용
	exit;
}
//////////////////////////////////////////////////////////////
// 참조
//////////////////////////////////////////////////////////////
$Query = "SELECT * FROM test_accountdb;";
echo $Query.'<br>'; // 확인용
$Result = mysqli_query($DB, $Query);
if(!$Result)
{
	echo "Query error : " . mysqli_error($DB) . '<br>';
	exit;
}
while($Data = mysqli_fetch_array($Result, MYSQL_ASSOC))
{
	$MemberNo = $Data['accountno'];
	$Id = $Data['id'];
	$Password = $Data['password'];
	echo $MemberNo . '/' . $Id . '/'. $Password .'<br>';
}

mysqli_free_result($Result);

//////////////////////////////////////////////////////////////
// DB 연결 끊기
//////////////////////////////////////////////////////////////
mysqli_close($DB);
// 정석대로 넣어본 것임. 필수는 아님, 알아서 APACHE가 다 해줌. 
// DB 할 일 다 했으면 빨리 접속을 끊어주는게 좋음..







/*------------------------------------------------
 로그인하여 내가 인증된 사용자라는걸 어떻게 알고 정보를 노출시키는가?

* 쿠키는 도메인마다 하나씩임
1. 클라이언트 최초 접속시 
클라이언트측에 Cookie에 서버에서 만든 Session키를 저장함
2. 클라이언트 접속시 해당 도메인에 대한 쿠키가 있으면
서버측에서 클라이언트의 쿠키가 있으면 DB든 어디든 뒤져서 찾아냄

세션키 갱신은?
일정 시간 지나면 파기

/////////////////////////
// 과제2//
/////////////////////////

login 테이블	: 정보저장용
session 테이블	: 생존시간 5분
auth_ 테이블	: 인증용

------------------------------------------------*/
?>

